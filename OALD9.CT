<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="28">
  <CheatEntries>
    <CheatEntry>
      <ID>3</ID>
      <Description>"AutoDumpXML"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>define(FILE_APPEND_DATA,4)
define(FILE_GENERIC_READ,0x00120089)
define(FILE_GENERIC_WRITE,0x00120116)
define(FILE_GENERIC_READWRITE,0x0012019f)
define(OPEN_ALWAYS,4)
define(OPEN_EXISTING, 3)
define(FILE_ATTRIBUTE_NORMAL,0x00000080)
define(FILE_BEGIN,0)
define(FILE_END,2)
define(INVALID_HANDLE_VALUE,0xffffffff)

globalalloc(html_str, 4)
globalalloc(html_len, 4)
globalalloc(passedInEntryIDAddr, 4)
globalalloc(nextEntryID, 4)
globalalloc(file_bytes, 4)
globalalloc(html_filedir, 256)
globalalloc(html_filepath, 256)
globalalloc(nextEntry_filepath, 256)
globalalloc(html_pathnumaddr, 4)
globalalloc(html_pathnumformat, 20)

html_str:
dd 0

html_len:
dd 0

passedInEntryIDAddr:
dd 0

nextEntryID:
dd 0

html_filedir:
db 'C:\OALD9_Out\'

nextEntry_filepath:
db 'C:\OALD9_Out\lastEntry.txt'

html_filepath:
db 0

html_pathnumaddr:
dd 0

html_pathnumformat:
db '%06d.xml', 0

[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
alloc(hOutputFile,4)
alloc(hRecordFile,4)
alloc(temp, 4)
alloc(entryCount, 4)
alloc(baseEntryID, 4)
label(UpdateEntryIDWriteFile)
label(UsepassedInEntryIDAddr)
label(DoWriteFile)
label(Cleanup)
label(CleanupNoRecordFile)
label(returnhere)
label(originalcode)
label(exit)

hRecordFile:
dd 0

temp:
dd 0

entryCount:
dd 0

baseEntryID:
dd 0

newmem: //this is allocated memory, you have read,write,execute access
// original stack frame
// 01DBEEA8(esp+0)      - 084F9020  string buffer
// 01DBEEAC(esp+4)      - 0100000C  entry index
// 01DBEEB0(esp+8)      - 00000000
// 01DBEEB4(esp+C)      - 08228624
// 01DBEEB8(esp+10)     - 01000001  base entry index
// 01DBEEBC(esp+14)     - 0100F19F  max entry index?
// 01DBEEC0(esp+18)     - 0000000F  numer of entries
// 01DBEEC4(esp+1C)     - 00000001
// 01DBEEC8(esp+20)     - 0009C400
// 01DBEECC(esp+24)     - 08227FF0

mov [html_str],eax
lea eax, [esp+4]
mov [passedInEntryIDAddr], eax
mov eax, [esp+10]
mov [baseEntryID], eax
mov eax, [esp+18]
mov [entryCount], eax
pushad

// open record file first
push 0
push FILE_ATTRIBUTE_NORMAL
push OPEN_ALWAYS
push 0
push 0
push FILE_GENERIC_READWRITE
push nextEntry_filepath
call kernel32.CreateFileA
cmp eax, INVALID_HANDLE_VALUE
je Cleanup
mov [hRecordFile], eax

// check if this is the first time
cmp [nextEntryID], 0
jne UpdateEntryIDWriteFile

// set up the file path if this is the first time
push html_filedir
push html_filepath
call kernel32.lstrcpyA

// create the directory for output files
push 0
push html_filepath
call kernel32.CreateDirectoryA

push html_filepath
call kernel32.lstrlenA

lea edx,[html_filepath]
add edx,eax
mov [html_pathnumaddr], edx

// find the next entry ID by reading record file
mov [file_bytes],0
push 0
push file_bytes
push 4
push temp
push [hRecordFile]
call kernel32.ReadFile
cmp [file_bytes], 4
jne UsepassedInEntryIDAddr

// update entry ID from record file
mov eax, [temp]
mov [nextEntryID], eax

push FILE_BEGIN
push 0
push 0
push [hRecordFile]
call kernel32.SetFilePointer
jmp UpdateEntryIDWriteFile

UsepassedInEntryIDAddr:
mov eax, [passedInEntryIDAddr]
mov eax, [eax]    // entry ID
mov [nextEntryID], eax
jmp DoWriteFile

UpdateEntryIDWriteFile:
mov eax, [nextEntryID]
push edx
mov edx, [passedInEntryIDAddr]
mov [edx], eax    // update the argument entry ID
pop edx

DoWriteFile:
popad
// get the entry now
call OALD9.exe+274B0

mov eax, [nextEntryID]
mov edx, [baseEntryID]
sub eax, edx
push eax
push html_pathnumformat
push [html_pathnumaddr]
call user32.wsprintfA

//push [html_str]
//push str_myfunction
//call CELUA_ExecuteFunction
push 0
push FILE_ATTRIBUTE_NORMAL
push OPEN_ALWAYS
push 0
push 0
push FILE_APPEND_DATA
push html_filepath
call kernel32.CreateFileA
cmp eax, INVALID_HANDLE_VALUE
je Cleanup

mov [hOutputFile], eax

push FILE_END
push 0
push 0
push [hOutputFile]
call kernel32.SetFilePointer

push [html_str]
call kernel32.lstrlenA // stdcall, no cleanup
mov [html_len], eax

push 0
push file_bytes
push [html_len]
push [html_str]
push [hOutputFile]
call kernel32.WriteFile

push [hOutputFile]
call kernel32.CloseHandle
mov [hOutputFile], 0

// update the next entry ID
mov eax, [nextEntryID]
add eax, [entryCount] // add number of entries
mov [nextEntryID], eax

// log the next entry ID to record file
push 0
push file_bytes
push 4
push nextEntryID
push [hRecordFile]
call kernel32.WriteFile

Cleanup:
cmp [hRecordFile], 0
je CleanupNoRecordFile
push [hRecordFile]
call kernel32.CloseHandle
mov [hRecordFile], 0

CleanupNoRecordFile:
jmp exit

originalcode:
call OALD9.exe+274B0

exit:
jmp returnhere

"OALD9.exe"+32122:
jmp newmem
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"OALD9.exe"+32122:
call OALD9.exe+274B0
//Alt: db E8 89 53 FF FF
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>html_str</Name>
      <Address>065F0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>html_len</Name>
      <Address>065F0010</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>html_cnt</Name>
      <Address>04330020</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>file_bytes</Name>
      <Address>065F0040</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>html_filedir</Name>
      <Address>065F0050</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>html_filepath</Name>
      <Address>065F0150</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>html_pathnumaddr</Name>
      <Address>065F0350</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>html_pathnumformat</Name>
      <Address>065F0360</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>strMem</Name>
      <Address>03AD0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>oldESP</Name>
      <Address>02090000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>curEntry</Name>
      <Address>02090010</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>entryCount</Name>
      <Address>02090020</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>nextEntryID</Name>
      <Address>065F0030</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>nextEntry_filepath</Name>
      <Address>065F0250</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>passedInEntryIDAddr</Name>
      <Address>065F0020</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
</CheatTable>
